AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template for WordPress. This template installs a highly-available, scalable WordPress deployment using a multi-az
  Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to deploy WordPress.

  **WARNING** You will be billed for the AWS resources created if you create a stack from this template.

  Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  A copy of the License is located at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  or in the "license" file accompanying this file. This file is distributed 
  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
  express or implied. See the License for the specific language governing 
  permissions and limitations under the License.
Parameters:
  #General:
  NamingPrefix:
    Type: String
    Description: The naming prefix for resources created by this template.
    Default: WebApp1
  #Imports:
  VPCImportName:
    Type: String
    Description: 'The CloudFormation name of the VPC stack to import'
    Default: 'WebApp1-VPC'
    MinLength: '3'
    MaxLength: '32'
  VPCImportApp1Instance1Subnet1:
    Type: String
    Description: 'The name of the subnet from VPC stack to import for subnet 1'
    Default: 'App1Subnet1'
  VPCImportApp1Instance1Subnet2:
    Type: String
    Description: 'The name of the subnet from VPC stack to import for subnet 2'
    Default: 'App1Subnet2'
  VPCImportApp1Instance1Subnet3:
    Type: String
    Description: 'The name of the subnet from VPC stack to import for subnet 3'
    Default: 'App1Subnet3'
  VPCImportALB1Subnet1:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'ALB1Subnet1'
  VPCImportALB1Subnet2:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'ALB1Subnet2'
  VPCImportALB1Subnet3:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'ALB1Subnet3'
  VPCImportDB1Subnet1:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'DB1Subnet1'
  VPCImportDB1Subnet2:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'DB1Subnet2'
  VPCImportDB1Subnet3:
    Type: String
    Description: 'The name of the subnet from VPC stack to import'
    Default: 'DB1Subnet3'
  #Application Tier
  Web1SSHKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  ALBSGSource:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Web1AutoScaleDesired:
    Default: '1'
    Description: The desired number of web instances in auto scaling group
    Type: Number
    MinValue: '1'
    MaxValue: '6'
    ConstraintDescription: must be between 1 and 6 EC2 instances.
  #Database Tier
  DB1Class:
    Description: Database instance class
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
      - db.m2.xlarge
      - db.m2.2xlarge
      - db.m2.4xlarge
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
    ConstraintDescription: must select a valid database instance type.
  DB1Name:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DB1User:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DB1Password:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  MultiAZDatabase:
    Default: 'false'
    Description: Create a Multi-AZ MySQL Amazon RDS database instance
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
  DB1AllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0ff8a91507f77f867
      HVMG2: ami-0a584ac55a7631c0c
    us-west-2:
      HVM64: ami-01e24be29428c15b2
      HVMG2: ami-0e09505bc235aa82d
    us-west-1:
      HVM64: ami-0bdb828fd58c52235
      HVMG2: ami-066ee5fd4a9ef77f1
    eu-west-1:
      HVM64: ami-047bb4163c506cd98
      HVMG2: ami-0a7c483d527806435
    eu-west-2:
      HVM64: ami-f976839e
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0ebc281c20e89ba4b
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0233214e13e500f77
      HVMG2: ami-06223d46a6d0661c7
    ap-northeast-1:
      HVM64: ami-06cd52961ce9f0d85
      HVMG2: ami-053cdd503598e4a9d
    ap-northeast-2:
      HVM64: ami-0a10b2721688ce9d2
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-0d98120a9fb693f07
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-08569b978cc4dfa10
      HVMG2: ami-0be9df32ae9f92309
    ap-southeast-2:
      HVM64: ami-09b42976632b27e9b
      HVMG2: ami-0a9ce9fecc3d1daf8
    ap-south-1:
      HVM64: ami-0912f71e06545ad88
      HVMG2: ami-097b15e89dbdcfcf4
    us-east-2:
      HVM64: ami-0b59bfac6be064b78
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      HVM64: ami-0b18956f
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-07b14488da8ea02a0
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-0a4eaf6c4454eda75
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-6b6a7d09
      HVMG2: NOT_SUPPORTED
Resources:
  ALB1SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTP access via port 80 and 443 to the allowed CIDR
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref ALBSGSource
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref ALBSGSource
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Load Balancer
      VpcId:
        Fn::ImportValue: !Sub '${VPCImportName}'
  ALB1LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
    Properties:
      #IpAddressType:
      # Name: String
      # Scheme: String
      SecurityGroups:
        - Ref: ALB1SecurityGroup
      # SubnetMappings:
      #   - SubnetMapping      
      Subnets:
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportALB1Subnet1}'
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportALB1Subnet2}'
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportALB1Subnet3}'
      # Tags:
      #   - Resource Tag
  ALB1Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
    Properties:
      #  Certificates:
        #- Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALB1TargetGroup
      LoadBalancerArn: !Ref ALB1LoadBalancer
      Port: '80'
      Protocol: HTTP
      #SslPolicy: String
  ALB1TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
    Properties:
      HealthCheckPath: /wordpress/wp-admin/install.php
      HealthCheckIntervalSeconds: 10
      #HealthCheckPath: 
      #HealthCheckPort: 
      #HealthCheckProtocol:
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      #Name: 
      Port: 80
      Protocol: HTTP
      #Tags:
        #-
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
      # Targets:
      #   - TargetDescription
      # TargetType: String
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub '${VPCImportName}'
  Web1InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Enable HTTP access via port 80 and 443 restricted to the load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ALB1LoadBalancer
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ALB1LoadBalancer
              - SecurityGroups
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Instance
      VpcId:
        Fn::ImportValue: !Sub '${VPCImportName}'
  Web1InstanceAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
    Properties:
      AutoScalingGroupName: !Sub '${NamingPrefix}'
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${VPCImportName}-App1Subnet1'
        - Fn::ImportValue: !Sub '${VPCImportName}-App1Subnet2'
        - Fn::ImportValue: !Sub '${VPCImportName}-App1Subnet3'
      LaunchConfigurationName: !Ref Web1LaunchConfig
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: !Ref Web1AutoScaleDesired
      TargetGroupARNs:
        - !Ref ALB1TargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${NamingPrefix}'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  Web1LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:  !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Web1LaunchConfig --configsets wordpress_install --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              jq: []
              awslogs: []
              httpd: []
              php: []
              php-mysql: []
              #mysql: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/create-wp-config:
              content: !Sub |
                #!/bin/bash -xe
                cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
                sed -i "s/'database_name_here'/'${DB1Name}'/g" wp-config.php
                sed -i "s/'username_here'/'${DB1User}'/g" wp-config.php
                sed -i "s/'password_here'/'${DB1Password}'/g" wp-config.php
                sed -i "s/'localhost'/'${DB1Instance.Endpoint.Address}'/g" wp-config.php
                chown -R apache /var/www
                chgrp -R apache /var/www
                chmod 2775 /var/www
                find /var/www -type d -exec sudo chmod 2775 {} \;
                find /var/www -type f -exec sudo chmod 0664 {} \;
              mode: '000500'
              owner: root
              group: root
          commands:
            01_configure_wordpress:
              command: /tmp/create-wp-config
              cwd: /var/www/html/wordpress
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      IamInstanceProfile: !Ref Web1InstanceInstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref Web1InstanceSecurityGroup
      KeyName: !Ref Web1SSHKeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo "Installing aws-cfn-bootstrap"
          yum install -y aws-cfn-bootstrap
          echo "Executing cfn-init..." 
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Web1LaunchConfig --configsets wordpress_install --region ${AWS::Region}
          echo "Executing cfn-signal..."
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Web1InstanceAutoScalingGroup --region ${AWS::Region}
          # echo "Running yum update..."
          # yum update -y
          echo "Restarting httpd..."
          service httpd restart
          echo "Updating Amazon ssm agent..."
          yum update amazon-ssm-agent -y          
          echo "UserData Complete"
  Web1InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${NamingPrefix}-EC2-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ec2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstanceStatus'
                Resource: '*'
        - PolicyName: cloudwatch
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
        - PolicyName: s3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:GetObject'
                Resource:
                - !Sub 'arn:aws:s3:::aws-ssm-${AWS::Region}/*'
                - !Sub 'arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*'
                - !Sub 'arn:aws:s3:::amazon-ssm-${AWS::Region}/*'
                - !Sub 'arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*'
                - !Sub 'arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*'
                - !Sub 'arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*'
        - PolicyName: ssm
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:DescribeDocument'
                  - 'ssm:GetManifest'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:PutComplianceItems'
                  - 'ssm:PutConfigurePackageResult'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'
        - PolicyName: ec2messages
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
        #Allow secrets manager for future use
        # - PolicyName: Web1InstanceSecretsManager
        #   PolicyDocument:
        #     Version: 2012-10-17
        #     Statement:
        #       - Effect: Allow
        #         Action: 'secretsmanager:GetSecretValue'
        #         Resource:
  Web1InstanceInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /Web1InstanceEc2Role/
      Roles:
        - !Ref Web1InstanceRole
  DB1EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Database access from web tier
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref Web1InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - Database
      VpcId:
        Fn::ImportValue: !Sub '${VPCImportName}'
  DB1SubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html
    Properties: 
      DBSubnetGroupDescription: !Sub '${NamingPrefix}-SubnetGroup'
      DBSubnetGroupName: !Sub '${NamingPrefix}-SubnetGroup'
      SubnetIds:
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportDB1Subnet1}'
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportDB1Subnet2}'
        - Fn::ImportValue: !Sub '${VPCImportName}-${VPCImportDB1Subnet3}'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref NamingPrefix
              - SubnetGroup
  DB1Instance:
    Type: 'AWS::RDS::DBInstance'
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html
    Properties:
      AllocatedStorage: !Ref DB1AllocatedStorage
      DBInstanceClass: !Ref DB1Class
      DBInstanceIdentifier: !Ref DB1Name
      DBName: !Ref DB1Name
      DBSubnetGroupName: !Ref DB1SubnetGroup
      Engine: MySQL
      MultiAZ: !Ref MultiAZDatabase
      MasterUsername: !Ref DB1User
      MasterUserPassword: !Ref DB1Password
      PubliclyAccessible: false
      # StorageEncrypted:
      # Tags:
      #   - Key: Name
      #     Value: !Join
      #       - '-'
      #       - - !Ref NamingPrefix
      #         - DB1Instance
      VPCSecurityGroups:
        - !GetAtt 
          - DB1EC2SecurityGroup
          - GroupId
Outputs:
  WebsiteURL:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt 
          - ALB1LoadBalancer
          - DNSName
        - /wordpress
    Description: WordPress Website
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "General Configuration"
        Parameters: 
          - NamingPrefix
      - 
        Label: 
          default: "VPC Stack Imports"
        Parameters: 
          - VPCImportName
          - VPCImportApp1Instance1Subnet1
          - VPCImportApp1Instance1Subnet2
          - VPCImportApp1Instance1Subnet3
          - VPCImportALB1Subnet1
          - VPCImportALB1Subnet2
          - VPCImportALB1Subnet3
          - VPCImportDB1Subnet1
          - VPCImportDB1Subnet2
          - VPCImportDB1Subnet3
      - 
        Label: 
          default: "Application Tier Configuration"
        Parameters: 
          - Web1SSHKeyName
          - InstanceType
          - Web1AutoScaleDesired
          - ALBSGSource
      - 
        Label: 
          default: "Database Tier Configuration"
        Parameters:
          - DB1Name
          - DB1Class
          - DB1User
          - DB1Password
          - MultiAZDatabase
          - DB1AllocatedStorage
