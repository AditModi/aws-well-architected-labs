AWSTemplateFormatVersion: '2010-09-09'
Description: Collects ECS Cluster and service data and places into a bucket in the management account
Parameters:
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to that will be created by the management template
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: 'ecs-services-clusters'
  DatabaseName:
    Type: String
    Description: Name of the Athena database to hold lambada information
    Default: optimization_data
  GlueRoleArn:
    Type: String
    Description: ARN of the IAM role deployed to use for glue.
  CodeBucket:
    Type: String
    Description: S3 Bucket that exists and holds code
    Default: aws-well-architected-labs
    AllowedValues:
      - aws-well-architected-labs-ireland
      - aws-well-architected-labs
      - aws-well-architected-labs-ohio
      - aws-well-architected-labs-virginia
  CodeKey:
    Type: String
    Description: file name of ZipFile with data code
    Default: Cost/Labs/300_Optimization_Data_Collection/ecs.zip
  MultiAccountRoleName:
    Type: String
    Description: Name of the IAM role deployed in all accounts which can retrieve AWS Data.
Outputs:
  LambdaRoleARN:
    Description: Role for Lambda execution of lambda data.
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
  LambdaFunctionARN:
    Description: ARN for lambda function which account id wil be passed too
    Value:
      Fn::GetAtt:
        - LambdaFunction
        - Arn
  SQSUrl:
    Description: TaskQueue URL the account collector lambda
    Value: !Ref TaskQueue
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "Lambda-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /
      Policies:
        - PolicyName: !Sub "Assume-Management-${CFDataName}-Account-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: "*"
        - PolicyName: !Sub "${CFDataName}-permissions"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:GetQueueAttributes"
                Resource: "*"
              - Effect: "Allow"
                Action:
                - "ecs:ListAttributes"
                - "ecs:DescribeTaskSets"
                - "ecs:DescribeTaskDefinition"
                - "ecs:DescribeClusters"
                - "ecs:ListServices"
                - "ecs:ListAccountSettings"
                - "ecs:DescribeCapacityProviders"
                - "ecs:ListTagsForResource"
                - "ecs:ListTasks"
                - "ecs:ListTaskDefinitionFamilies"
                - "ecs:DescribeServices"
                - "ecs:ListContainerInstances"
                - "ecs:DescribeContainerInstances"
                - "ecs:DescribeTasks"
                - "ecs:ListTaskDefinitions"
                - "ecs:ListClusters"
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${CFDataName}-Lambda-Function"
      Description: !Sub "LambdaFunction to retrieve ${CFDataName}"
      Runtime: python3.8
      Code:
        S3Key: !Ref CodeKey
        S3Bucket: !Ref CodeBucket 
      Handler: 'ecs.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: DestinationBucket
          PREFIX:
            Ref: CFDataName
          ROLENAME : !Ref MultiAccountRoleName
  Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name:
        !Sub "${CFDataName}Crawler"
      Role: !Ref GlueRoleArn
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/${CFDataName}-data/"
  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt TaskQueue.Arn
  TaskQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: 300
      ReceiveMessageWaitTimeSeconds: 20
      DelaySeconds: 2
      KmsMasterKeyId: "alias/aws/sqs"
  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt TaskQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn