AWSTemplateFormatVersion: '2010-09-09'
Description: Retrieves AWS Compute Optimizer information from across an organization
Parameters:
  DatabaseName:
    Type: String
    Description: Name of the Athena database to be created to hold lambda information
    Default: optimization_data
  DestinationBucket:
    Type: String
    Description: Name of the S3 Bucket to be created to hold data information
    AllowedPattern: (?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)
  RoleNameARN:
    Type: String
    Description: ARN of the IAM role deployed in the management accounts which can retrieve lambda data.
  CFDataName:
    Type: String
    Description: The name of what this cf is doing.
    Default: ComputeOptimizer
  DestinationBucketARN:
    Type: String
    Description: ARN of the S3 Bucket that exists or needs to be created to hold rightsizing information
  CodeBucket:
      Type: String
      Description: S3 Bucket that exists and holds code
      Default: aws-well-architected-labs-ireland
  CodeKey:
    Type: String
    Description: file name of ZipFile with data code
    Default: Cost/Labs/300_Optimization_Data_Collection/coc.zip
  Prefix:
    Type: String
    Description: Service which the data collector is looking at
    Default: COC
  # ScheduleExpression:
  #   Type: String
  #   Description: Event Schedule
  #   Default: "cron(30 12 L * ? *)"
  GlueRoleARN:
    Type: String
Outputs:
  # AthenaSavedQuery:
  #   Description: This saved query will provide you a summary of your lambda data
  #   Value:
  #     Ref: AthenaQuery
  LambdaRoleARN:
    Description: Role for Lambda execution of lambda data.
    Value:
      Fn::GetAtt:
        - LambdaRole
        - Arn
  LambdaARN:
    Description: Lambda Arn
    Value: 
       Fn::GetAtt:
        - LambdaFunction
        - Arn
  SQSUrl:
    Description: TaskQueue URL the account collector lambda
    Value: !Ref TaskQueue
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "Lambda-Role-${CFDataName}"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
      Path: /
      Policies:
        - PolicyName: !Sub "Assume-Management-${CFDataName}-Account-Role"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource:
                  "*"
        - PolicyName: !Sub "${CFDataName}-S3-Access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  !Ref DestinationBucketARN
              - Effect: "Allow"
                Action:
                  - "glue:StartCrawler"
                Resource: "*"
        - PolicyName: "data"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                      - "s3:*"
                      - "sqs:ReceiveMessage"
                      - "sqs:DeleteMessage"
                      - "sqs:GetQueueAttributes"
                      - "compute-optimizer:*"
                      - "EC2:DescribeInstances"
                      - "cloudwatch:GetMetricData"
                      - "autoscaling:DescribeAutoScalingGroups"
                      - "compute-optimizer:UpdateEnrollmentStatus"
                      - "compute-optimizer:GetAutoScalingGroupRecommendations"
                      - "compute-optimizer:GetEC2InstanceRecommendations"
                      - "compute-optimizer:GetEnrollmentStatus"
                      - "compute-optimizer:GetEC2RecommendationProjectedMetrics"
                      - "compute-optimizer:GetRecommendationSummaries"
                      - "organizations:ListAccounts"
                      - "organizations:DescribeOrganization"
                      - "organizations:DescribeAccount"
                      - "lambda:ListFunctions"
                      - "lambda:ListProvisionedConcurrencyConfigs"
                      - "EC2:DescribeVolumes"     
                Resource: "*"
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${CFDataName}-Lambda-Function"
      Description: !Sub "LambdaFunction to retrieve ${CFDataName}"
      Runtime: python3.8
      Code:
         S3Bucket: !Ref CodeBucket
         S3Key: !Ref CodeKey
         #ZipFile

      Handler: 'COC.lambda_handler'
      MemorySize: 2688
      Timeout: 300
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Environment:
        Variables:
          REGION:
            Ref: "AWS::Region"
          BUCKET_NAME:
            Ref: DestinationBucket
          ROLE_ARN:
            Ref: RoleNameARN
          PATH:
            Ref: CFDataName
          EC2Crawler:
            Ref: EC2Crawler
          AUTOCrawler:
            Ref: AUTOCrawler
          EBSCrawler:
            Ref: EBSCrawler
          LambdaCrawler:
            Ref: LambdaCrawler
          PREFIX:
            Ref: Prefix
  EC2Crawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "ec2_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_ec2_instance"
  AUTOCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "auto_scale_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_auto_scale"
  EBSCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "ebs_volume_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_ebs_volume"
  LambdaCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: "lambda_Compute_Optimizer_crawler"
      Role: !Ref GlueRoleARN
      DatabaseName: !Ref DatabaseName
      Targets:
        S3Targets:
          - Path: !Sub "s3://${DestinationBucket}/Compute_Optimizer/Compute_Optimizer_lambda"

  
  # CloudWatchTrigger:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description:  Notification Event for lambda data
  #     Name: !Sub "${CFDataName}-Scheduler"
  #     ScheduleExpression: !Ref ScheduleExpression
  #     State: ENABLED
  #     Targets:
  #       - Arn:
  #           Fn::GetAtt:
  #             - LambdaFunction
  #             - Arn
  #         Id: TriggerForEBSUtilization
  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt TaskQueue.Arn
  TaskQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: 300
      ReceiveMessageWaitTimeSeconds: 20
      DelaySeconds: 2
      KmsMasterKeyId: "alias/aws/sqs"
  EventSourceMappingECS:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt TaskQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn

  # AthenaQuery:
  #   Type: AWS::Athena::NamedQuery
  #   Properties:
  #     Database: !Ref DatabaseName
  #     Description: Provides a summary view of the lambda data
  #     Name: !Sub ${CFDataName}-summary-view
  #     QueryString: !Sub
  #       "SELECT * from ${DatabaseName}"